(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[567],{45901:function(e,n,t){Promise.resolve().then(t.t.bind(t,25250,23)),Promise.resolve().then(t.bind(t,19721)),Promise.resolve().then(t.bind(t,57449))},1657:function(e,n,t){"use strict";t.d(n,{cn:function(){return s}});var r=t(75504),a=t(51367);function s(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];return(0,a.m6)((0,r.W)(...n))}},57449:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return h}});var r=t(57437),a=t(2265),s=t(16054),o=t.n(s);t(99406),t(44697);var l=t(1657);let i=a.forwardRef((e,n)=>{let{className:t,...a}=e;return(0,r.jsx)("div",{ref:n,className:(0,l.cn)("rounded-lg border bg-card text-card-foreground shadow-sm",t),...a})});i.displayName="Card";let m=a.forwardRef((e,n)=>{let{className:t,...a}=e;return(0,r.jsx)("div",{ref:n,className:(0,l.cn)("flex flex-col space-y-1.5 p-6",t),...a})});m.displayName="CardHeader";let g=a.forwardRef((e,n)=>{let{className:t,...a}=e;return(0,r.jsx)("h3",{ref:n,className:(0,l.cn)("text-2xl font-semibold leading-none tracking-tight",t),...a})});g.displayName="CardTitle",a.forwardRef((e,n)=>{let{className:t,...a}=e;return(0,r.jsx)("p",{ref:n,className:(0,l.cn)("text-sm text-muted-foreground",t),...a})}).displayName="CardDescription";let c=a.forwardRef((e,n)=>{let{className:t,...a}=e;return(0,r.jsx)("div",{ref:n,className:(0,l.cn)("p-6 pt-0",t),...a})});function d(e){let{title:n,code:t,children:a}=e;return(0,r.jsxs)(i,{children:[(0,r.jsx)(m,{children:(0,r.jsx)(g,{children:n})}),(0,r.jsxs)(c,{children:[(0,r.jsx)("pre",{className:"p-4 rounded-md overflow-x-auto",children:(0,r.jsx)("code",{className:"language-python",children:t})}),a]})]})}c.displayName="CardContent",a.forwardRef((e,n)=>{let{className:t,...a}=e;return(0,r.jsx)("div",{ref:n,className:(0,l.cn)("flex items-center p-6 pt-0",t),...a})}).displayName="CardFooter";let p={sequential_workflow:{chart:"\n      graph TD;\n        Layer[First Agent] --> Layer1[Second Agent];\n        Layer1 --> Layer2[Third Agent];\n        Layer2 --> FinalOutput[Fourth Agent];\n  ",code:'\nfrom swarms import Agent, SequentialWorkflow\nfrom swarm_models import Anthropic\n\nllm = Anthropic()\n\nagent1 = Agent(\n    agent_name="Blog generator",\n    system_prompt="Generate a blog post like stephen king",\n    llm=llm,\n    max_loops=1,\n    dashboard=False,\n    tools=[],\n)\nagent2 = Agent(\n    agent_name="summarizer",\n    system_prompt="Summarize the blog post",\n    llm=llm,\n    max_loops=1,\n    dashboard=False,\n    tools=[],\n)\n\nworkflow = SequentialWorkflow(\n    agents=[agent1, agent2], max_loops=1, verbose=False\n)\n\nworkflow.run(\n    "Generate a blog post on how swarms of agents can help businesses grow."\n)\n              '},agent_rearrange:{code:'\nfrom swarms import Agent, AgentRearrange\nfrom swarm_models import Anthropic\n\ndirector = Agent(\n    agent_name="Director",\n    system_prompt="Directs the tasks for the workers",\n    llm=Anthropic(),\n    max_loops=1,\n    dashboard=False,\n    streaming_on=True,\n    verbose=True,\n    stopping_token="<DONE>",\n    state_save_file_type="json",\n    saved_state_path="director.json",\n)\n\nworker1 = Agent(\n    agent_name="Worker1",\n    system_prompt="Generates a transcript for a youtube video on what swarms are",\n    llm=Anthropic(),\n    max_loops=1,\n    dashboard=False,\n    streaming_on=True,\n    verbose=True,\n    stopping_token="<DONE>",\n    state_save_file_type="json",\n    saved_state_path="worker1.json",\n)\n\nworker2 = Agent(\n    agent_name="Worker2",\n    system_prompt="Summarizes the transcript generated by Worker1",\n    llm=Anthropic(),\n    max_loops=1,\n    dashboard=False,\n    streaming_on=True,\n    verbose=True,\n    stopping_token="<DONE>",\n    state_save_file_type="json",\n    saved_state_path="worker2.json",\n)\n\nagents = [director, worker1, worker2]\nflow = "Director -> Worker1 -> Worker2"\n\nagent_system = AgentRearrange(agents=agents, flow=flow)\noutput = agent_system.run(\n    "Create a format to express and communicate swarms of llms in a structured manner for youtube"\n)\n              '},mixture_of_agents:{chart:"\n    graph TD;\n        TaskInput --> Layer1[Layer 1: Reference Agents];\n        Layer1 --> Agent1[Agent 1];\n        Layer1 --> Agent2[Agent 2];\n        Layer1 --> AgentN[Agent N];\n        Agent1 --> Agent1Response[Agent 1 Response];\n        Agent2 --> Agent2Response[Agent 2 Response];\n        AgentN --> AgentNResponse[Agent N Response];\n        Agent1Response --> Layer2[Aggregator Agent];\n        Agent2Response --> Layer2[Aggregator Agent];\n        AgentNResponse --> Layer2[Layer 2: Aggregator Agent];\n        Layer2 --> Aggregate[Aggregate All Responses];\n        Aggregate --> FinalOutput[Final Output];\n",code:'\nfrom swarms import Agent, OpenAIChat, MixtureOfAgents\n\ndirector = Agent(\n    agent_name="Director",\n    system_prompt="Directs the tasks for the accountants",\n    llm=OpenAIChat(),\n    max_loops=1,\n    dashboard=False,\n    streaming_on=True,\n    verbose=True,\n    stopping_token="<DONE>",\n    state_save_file_type="json",\n    saved_state_path="director.json",\n)\n\naccountant1 = Agent(\n    agent_name="Accountant1",\n    system_prompt="Prepares financial statements",\n    llm=OpenAIChat(),\n    max_loops=1,\n    dashboard=False,\n    streaming_on=True,\n    verbose=True,\n    stopping_token="<DONE>",\n    state_save_file_type="json",\n    saved_state_path="accountant1.json",\n)\n\naccountant2 = Agent(\n    agent_name="Accountant2",\n    system_prompt="Audits financial records",\n    llm=OpenAIChat(),\n    max_loops=1,\n    dashboard=False,\n    streaming_on=True,\n    verbose=True,\n    stopping_token="<DONE>",\n    state_save_file_type="json",\n    saved_state_path="accountant2.json",\n)\n\nagents = [director, accountant1, accountant2]\n\nswarm = MixtureOfAgents(\n    name="Mixture of Accountants",\n    agents=agents,\n    layers=3,\n    final_agent=director,\n)\n\nout = swarm.run("Prepare financial statements and audit financial records")\n              '},forest_swarm:{code:'\nfrom swarms.structs.tree_swarm import TreeAgent, Tree, ForestSwarm\n\nagents_tree1 = [\n    TreeAgent(\n        system_prompt="Stock Analysis Agent",\n        agent_name="Stock Analysis Agent",\n    ),\n    TreeAgent(\n        system_prompt="Financial Planning Agent",\n        agent_name="Financial Planning Agent",\n    ),\n    TreeAgent(\n        agent_name="Retirement Strategy Agent",\n        system_prompt="Retirement Strategy Agent",\n    ),\n]\n\nagents_tree2 = [\n    TreeAgent(\n        system_prompt="Tax Filing Agent",\n        agent_name="Tax Filing Agent",\n    ),\n    TreeAgent(\n        system_prompt="Investment Strategy Agent",\n        agent_name="Investment Strategy Agent",\n    ),\n    TreeAgent(\n        system_prompt="ROTH IRA Agent", agent_name="ROTH IRA Agent"\n    ),\n]\n\ntree1 = Tree(tree_name="Financial Tree", agents=agents_tree1)\ntree2 = Tree(tree_name="Investment Tree", agents=agents_tree2)\n\nmulti_agent_structure = ForestSwarm(trees=[tree1, tree2])\n\ntask = "Our company is incorporated in delaware, how do we do our taxes for free?"\noutput = multi_agent_structure.run(task)\n              '}};var u=t(73009),_=e=>{let{chart:n,theme:t="light"}=e;return(0,a.useEffect)(()=>{let e={startOnLoad:!0,theme:t,flowchart:{useMaxWidth:!1}};"dark"===t?(e.theme="dark",e.themeVariables={primaryColor:"#333",primaryTextColor:"#fff",primaryBorderColor:"#fff",lineColor:"#ccc",secondaryColor:"#006100",tertiaryColor:"#fff"}):(e.theme="default",e.themeVariables={primaryColor:"#f5f5f5",primaryTextColor:"#000",primaryBorderColor:"#888",lineColor:"#888",secondaryColor:"#006100",tertiaryColor:"#fff"}),u.Z.initialize({...e,startOnLoad:!0}),u.Z.contentLoaded()},[t]),(0,r.jsx)("div",{className:"mermaid",children:n})},f=t(91774);function h(){let e=(0,f.F)();return(0,a.useEffect)(()=>{o().highlightAll()},[]),(0,r.jsxs)("section",{id:"examples",className:"py-20",children:[(0,r.jsx)("h3",{className:"text-3xl font-bold mb-8 text-center",children:"Multi-Agent Structures"}),(0,r.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-8",children:[(0,r.jsx)(d,{title:"Sequential Workflow",code:p.sequential_workflow.code,children:(0,r.jsxs)("div",{className:"mt-10",children:[(0,r.jsx)("h3",{children:"Here's a sample diagram:"}),(0,r.jsx)(_,{chart:p.sequential_workflow.chart,theme:e.resolvedTheme})]})}),(0,r.jsx)(d,{title:"Agent Rearrange",code:p.agent_rearrange.code}),(0,r.jsx)(d,{title:"Mixture of Agents",code:p.mixture_of_agents.code,children:(0,r.jsxs)("div",{className:"mt-10",children:[(0,r.jsx)("h3",{children:"Here's a sample diagram:"}),(0,r.jsx)(_,{chart:p.mixture_of_agents.chart,theme:e.resolvedTheme})]})}),(0,r.jsx)(d,{title:"Forest Swarm",code:p.forest_swarm.code})]})]})}}},function(e){e.O(0,[691,2150,5250,9046,17,3410,545,2971,8069,1744],function(){return e(e.s=45901)}),_N_E=e.O()}]);